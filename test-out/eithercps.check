/*****************************************
  Emitting Generated Code                  
*******************************************/
class singleConditional extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x3: Int = 0
var x4: Int = 0
var x5: Boolean = true
val x2 = x0 <= 3
val x12 = if (x2) {
x3 = 2
x5 = true
()
} else {
x4 = 4
x5 = false
()
}
val x13 = x5
val x20 = if (x13) {
val x14 = x3
x1 = x14
()
} else {
val x17 = x4
x1 = x17
()
}
val x21 = x1
x21
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
/*****************************************
  Emitting Generated Code                  
*******************************************/
class singleConditionalBis extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x3: Int = 0
var x4: Int = 0
var x5: Boolean = true
val x2 = x0 <= 3
val x12 = if (x2) {
x3 = 2
x5 = true
()
} else {
x4 = 4
x5 = false
()
}
val x13 = x5
val x20 = if (x13) {
val x14 = x3
x1 = x14
()
} else {
val x17 = x4
x1 = x17
()
}
val x21 = x1
x21
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x4: Int = 0
var x5: Int = 0
var x6: Boolean = true
val x2 = x0 <= 3
val x31 = if (x2) {
var x7: Int = 0
var x8: Int = 0
var x9: Boolean = true
val x3 = x0 >= 1
val x16 = if (x3) {
x7 = 2
x9 = true
()
} else {
x8 = 3
x9 = false
()
}
val x17 = x9
val x26 = if (x17) {
val x18 = x7
x4 = x18
x6 = true
()
} else {
val x22 = x8
x5 = x22
x6 = false
()
}
x26
} else {
x5 = 4
x6 = false
()
}
val x32 = x6
val x39 = if (x32) {
val x33 = x4
x1 = x33
()
} else {
val x36 = x5
x1 = x36
()
}
val x40 = x1
x40
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditionalBis extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x4: Int = 0
var x5: Int = 0
var x6: Boolean = true
val x2 = x0 <= 3
val x31 = if (x2) {
var x7: Int = 0
var x8: Int = 0
var x9: Boolean = true
val x3 = x0 >= 1
val x16 = if (x3) {
x7 = 2
x9 = true
()
} else {
x8 = 3
x9 = false
()
}
val x17 = x9
val x26 = if (x17) {
val x18 = x7
x4 = x18
x6 = true
()
} else {
val x22 = x8
x5 = x22
x6 = false
()
}
x26
} else {
x5 = 4
x6 = false
()
}
val x32 = x6
val x39 = if (x32) {
val x33 = x4
x1 = x33
()
} else {
val x36 = x5
x1 = x36
()
}
val x40 = x1
x40
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
