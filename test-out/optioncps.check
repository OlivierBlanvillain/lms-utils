/*****************************************
  Emitting Generated Code                  
*******************************************/
class singleConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x9 = if (x1) {
x4 = true
x5 = x0
()
} else {
()
}
val x10 = x4
val x15 = if (x10) {
val x11 = x5
x2 = true
x3 = x11
()
} else {
()
}
val x16 = x2
val x21 = if (x16) {
val x17 = x3
val x18 = new OptionInt(x17,true)
x18
} else {
val x20 = new OptionInt(0,false)
x20
}
x21
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x34 = if (x1) {
var x7: Boolean = false
var x8: Int = 0
val x6 = x0 >= 1
val x12 = if (x6) {
x7 = true
x8 = x0
()
} else {
()
}
val x13 = x7
val x18 = if (x13) {
val x14 = x8
x4 = true
x5 = x14
()
} else {
()
}
x18
} else {
var x21: Boolean = false
var x22: Int = 0
val x20 = x0 >= 5
val x26 = if (x20) {
x21 = true
x22 = x0
()
} else {
()
}
val x27 = x21
val x32 = if (x27) {
val x28 = x22
x4 = true
x5 = x28
()
} else {
()
}
x32
}
val x35 = x4
val x40 = if (x35) {
val x36 = x5
x2 = true
x3 = x36
()
} else {
()
}
val x41 = x2
val x46 = if (x41) {
val x42 = x3
val x43 = new OptionInt(x42,true)
x43
} else {
val x45 = new OptionInt(0,false)
x45
}
x46
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(5,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional2 extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 == 3
val x22 = if (x1) {
x4 = true
x5 = x0
()
} else {
var x9: Boolean = false
var x10: Int = 0
val x14 = if (x1) {
x9 = true
x10 = x0
()
} else {
()
}
val x15 = x9
val x20 = if (x15) {
val x16 = x10
x4 = true
x5 = x16
()
} else {
()
}
x20
}
val x23 = x4
val x28 = if (x23) {
val x24 = x5
x2 = true
x3 = x24
()
} else {
()
}
val x29 = x2
val x34 = if (x29) {
val x30 = x3
val x31 = new OptionInt(x30,true)
x31
} else {
val x33 = new OptionInt(0,false)
x33
}
x34
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapSome extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x1: Boolean = false
var x2: Int = 0
x1 = true
val x3 = x0 * 2
x2 = x3
val x6 = x1
val x11 = if (x6) {
val x7 = x2
val x8 = new OptionInt(x7,true)
x8
} else {
val x10 = new OptionInt(0,false)
x10
}
x11
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(10,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapNone extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x1: Boolean = false
var x2: Int = 0
val x3 = x1
val x8 = if (x3) {
val x4 = x2
val x5 = new OptionInt(x4,true)
x5
} else {
val x7 = new OptionInt(0,false)
x7
}
x8
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x9 = if (x1) {
x4 = true
x5 = x0
()
} else {
()
}
val x10 = x4
val x16 = if (x10) {
val x11 = x5
x2 = true
val x12 = x11 * 2
x3 = x12
()
} else {
()
}
val x17 = x2
val x22 = if (x17) {
val x18 = x3
val x19 = new OptionInt(x18,true)
x19
} else {
val x21 = new OptionInt(0,false)
x21
}
x22
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapConditional2 extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x13 = if (x1) {
x4 = true
x5 = x0
()
} else {
x4 = true
val x9 = x0 * 2
x5 = x9
()
}
val x14 = x4
val x20 = if (x14) {
val x15 = x5
x2 = true
val x16 = x15 * 3
x3 = x16
()
} else {
()
}
val x21 = x2
val x26 = if (x21) {
val x22 = x3
val x23 = new OptionInt(x22,true)
x23
} else {
val x25 = new OptionInt(0,false)
x25
}
x26
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(30,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapNestedConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x24 = if (x1) {
var x7: Boolean = false
var x8: Int = 0
val x6 = x0 >= 1
val x12 = if (x6) {
x7 = true
x8 = x0
()
} else {
()
}
val x13 = x7
val x18 = if (x13) {
val x14 = x8
x4 = true
x5 = x14
()
} else {
()
}
x18
} else {
x4 = true
val x20 = x0 * 2
x5 = x20
()
}
val x25 = x4
val x31 = if (x25) {
val x26 = x5
x2 = true
val x27 = x26 * 3
x3 = x27
()
} else {
()
}
val x32 = x2
val x37 = if (x32) {
val x33 = x3
val x34 = new OptionInt(x33,true)
x34
} else {
val x36 = new OptionInt(0,false)
x36
}
x37
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(30,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapSome extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x1: Boolean = false
var x2: Int = 0
x1 = true
val x3 = x0 * 2
x2 = x3
val x6 = x1
val x11 = if (x6) {
val x7 = x2
val x8 = new OptionInt(x7,true)
x8
} else {
val x10 = new OptionInt(0,false)
x10
}
x11
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(10,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapNone extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x1: Boolean = false
var x2: Int = 0
val x3 = x1
val x8 = if (x3) {
val x4 = x2
val x5 = new OptionInt(x4,true)
x5
} else {
val x7 = new OptionInt(0,false)
x7
}
x8
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = false
var x3: Int = 0
var x4: Boolean = false
var x5: Int = 0
val x1 = x0 <= 3
val x9 = if (x1) {
x4 = true
x5 = x0
()
} else {
()
}
val x10 = x4
val x31 = if (x10) {
val x11 = x5
var x13: Boolean = false
var x14: Int = 0
val x12 = x11 >= 1
val x23 = if (x12) {
x13 = true
val x15 = x11 * 5
x14 = x15
()
} else {
x13 = true
val x19 = x11 * 10
x14 = x19
()
}
val x24 = x13
val x29 = if (x24) {
val x25 = x14
x2 = true
x3 = x25
()
} else {
()
}
x29
} else {
()
}
val x32 = x2
val x37 = if (x32) {
val x33 = x3
val x34 = new OptionInt(x33,true)
x34
} else {
val x36 = new OptionInt(0,false)
x36
}
x37
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
OptionInt(15,true)
OptionInt(0,true)
